#!/usr/bin/env python3
#-------------------------------------------------------------------------------
# Copyright (c) 2015 Jason Lynch <jason@calindora.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-------------------------------------------------------------------------------

import sys


#-------------------------------------------------------------------------------
# Route Definitions
#-------------------------------------------------------------------------------

class Route(object):
    def __init__(self, key, name):
        self.key = key
        self.name = name

VERSION = 1

ROUTES = {
    'uc': ('Any%'),
}


#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

def tabs(text):
    return '\t' * ((39 - len(text)) // 8)


def Choice(choices):
    output = 'CHOICE\t{}\n'.format(len(choices))

    for choice in choices:
        output += choice

    output += 'END'

    return output


def Note(title):
    return ('NOTE\t{}'.format(title))


def Option(title, children):
    output = 'OPTION\t{}\n'.format(title)

    for index, child in enumerate(children):
        output += '{}\n'.format(child)

    return output


def Path(title, tiles, required_steps, optional_steps, encounter_rate, encounter_group, transition_count, do_steps, single_step, double_step, world_map):
    if title.find('Map') >= 0 and not world_map:
        print('WARNING: Map item claims to not be world map.')
    return ('PATH\t{}{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}'.format(title, tabs(title), tiles, required_steps, optional_steps, encounter_rate, encounter_group, transition_count, '+' if do_steps else '-', '+' if single_step else '-', '+' if double_step else '-', '+' if world_map else '-'))


def Save(title, frames):
    return ('SAVE\t{}{}\t{}'.format(title, tabs(title), frames))


def Noop(count):
    return ('NOOP\t{}'.format(count))


def Search(title, encounters, children):
    output = 'SEARCH\t{}{}\t{}\n'.format(title, tabs(title), '+'.join(map(str, encounters)))

    for child in children:
        output += '{}\n'.format(child)

    output += 'WAIT'

    return output

#-------------------------------------------------------------------------------
# Header
#-------------------------------------------------------------------------------

route = Route(sys.argv[1], *ROUTES[sys.argv[1]])

print('ROUTE\tFinal Fantasy IV Unprecedented Crisis v2.1{}'.format(route.name))
print('VERSION\t{}'.format(VERSION))

#-------------------------------------------------------------------------------
# Pre-Mist Route
#-------------------------------------------------------------------------------

print(Path('Castle Baron', 60, 44, 1, 0, 0, 7, True, True, True, False))
print(Path('World Map (Baron)', 18, 17, 0, 7, 0, 1, False, False, True, True))
print(Path('Misty Cave', 115, 110, 0, 7, 16, 1, True, True, True, False))
print(Path('World Map (Mist)', 13, 12, 0, 7, 1, 1, False, False, True, True))

#-------------------------------------------------------------------------------
# Post-Mist Route
#-------------------------------------------------------------------------------

print(Path('World Map (Kaipo)', 37, 36, 0, 8, 1, 1, False, False, True, True))
print(Note('Kaipo'))
print(Path('World Map (Kaipo)', 33, 32, 0, 8, 1, 1, False, False, True, True))
print(Path('Watery Pass-South B1F', 53, 52, 0, 7, 17, 1, False, False, True, False))
print(Path('Watery Pass-South B2F', 91, 90, 0, 7, 17, 1, False, False, True, False))
print(Path('Watery Pass-South Save Room', 6, 4, 0, 0, 0, 1, True, True, True, False))
print(Path('Watery Pass-South B2F', 54, 53, 0, 7, 17, 1, False, False, True, False))
print(Path('Watery Pass-South B3F', 35, 34, 0, 7, 18, 1, True, False, True, False))
print(Path('Watery Pass-North B2F', 22, 21, 0, 8, 18, 1, False, False, True, False))
print(Path('Watery Pass-North B1F', 62, 60, 0, 8, 19, 1, False, True, True, False))
print(Path('World Map (Kaipo)', 10, 9, 0, 8, 1, 1, False, False, True, True))
print(Path('Waterfalls B1F', 2, 1, 0, 0, 0, 1, True, False, True, False))
print(Path('Waterfalls B2F', 46, 45, 0, 8, 20, 1, False, False, True, False))
print(Path('Waterfalls Lake', 38, 37, 0, 8, 20, 1, False, False, True, False))
print(Note('Battle: Octomamm'))
print(Path('Waterfalls Lake', 2, 1, 0, 8, 20, 0, False, True, True, False))
print(Path('World Map (Kaipo)', 11, 11, 0, 8, 1, 1, False, False, True, True))
print(Path('World Map (Damcyan)', 6, 4, 0, 8, 2, 0, False, False, True, True))
print(Path('Damcyan', 36, 21, 1, 0, 0, 3, True, True, True, False))

#-------------------------------------------------------------------------------
# Antlion Cave
#-------------------------------------------------------------------------------

print(Path('Antlion B1F', 39, 38, 0, 8, 21, 1, False, False, True, False))

antlion_b2f_choices = [
    Option('Antlion B2F Inward Direct', [
        Path('Antlion B2F', 83, 80, 0, 8, 22, 1, False, True, True, False),
        Noop(1),
    ]),
    Option('Antlion B2F Inward Charm Room Steps', [
        Path('Antlion B2F', 34, 33, 0, 8, 22, 1, False, False, True, False),
        Path('Antlion Charm Room', 1, 0, 0, 0, 0, 1, True, False, True, False),
        Path('Antlion B2F', 55, 52, 0, 8, 22, 1, False, True, True, False),
    ]),
]

print(Choice(antlion_b2f_choices))
print(Path('Antlion\'s Nest', 15, 14, 0, 8, 22, 1, False, False, True, False))
print(Note('Battle: Antlion'))
print(Path('Antlion\'s Nest', 17, 15, 0, 8, 22, 0, False, True, True, False))

antlion_b2f_choices = [
    Option('Antlion B2F Outward Direct', [
        Noop(1),
        Path('Antlion B2F', 83, 80, 0, 8, 22, 1, False, True, True, False),
    ]),
    Option('Antlion B2F Outward Charm Room Steps', [
        Path('Antlion B2F', 54, 51, 0, 8, 22, 1, False, True, True, False),
        Path('Antlion Charm Room', 1, 0, 0, 0, 0, 1, True, False, True, False),
        Path('Antlion B2F', 35, 34, 0, 8, 22, 1, False, False, True, False),
    ]),
]

print(Choice(antlion_b2f_choices))
print(Path('Antlion B1F', 39, 38, 0, 8, 21, 1, False, False, True, False))
print(Note('Kaipo Revisited'))

#-------------------------------------------------------------------------------
# Mt.Hobs and Fabul
#-------------------------------------------------------------------------------

print(Path('Mt.Hobs-West', 41, 39, 0, 8, 23, 1, False, True, True, False))
print(Path('Mt.Hobs Summit', 16, 15, 0, 8, 24, 1, False, False, True, False))
print(Note('Battle: MomBomb'))
print(Path('Mt.Hobs Summit', 7, 6, 0, 8, 24, 0, False, False, True, False))
print(Path('Mt.Hobs-East', 55, 46, 0, 8, 25, 1, True, True, True, False))
print(Path('World Map (Fabul)', 86, 84, 0, 10, 3, 1, False, True, True, True))
print(Path('Fabul', 104, 81, 2, 0, 0, 9, True, True, True, False))
print(Note('Fabul Boat'))

#-------------------------------------------------------------------------------
# Baron and Mist
#-------------------------------------------------------------------------------

print(Path('World Map (Baron)', 22, 21, 0, 7, 0, 0, False, False, True, True))
print(Path('Old Water-way', 91, 90, 0, 8, 30, 1, False, False, True, False))
print(Path('Castle Baron B3F', 55, 54, 0, 8, 31, 1, False, False, True, False))
print(Path('Castle Baron B2F', 27, 26, 0, 8, 32, 1, False, False, True, False))

castle_baron_b1f_choices = [
    Option('Castle Baron B1F Inward Direct', [
        Noop(1),
        Path('Castle Baron B1F', 22, 21, 0, 8, 32, 1, False, False, True, False),
    ]),
    Option('Castle Baron B1F Inward Save Room Steps', [
        Path('Castle Baron B1F', 11, 10, 0, 8, 32, 1, False, False, True, False),
        Path('Castle Baron B1F Save Room', 1, 0, 0, 0, 0, 1, True, False, True, False),
        Path('Castle Baron B1F', 25, 24, 0, 8, 32, 1, False, False, True, False),
    ]),
]

print(Choice(castle_baron_b1f_choices))
print(Path('Castle Baron', 195, 111, 1, 0, 0, 3, True, True, True, False))
print(Path('World Map (Baron)', 18, 17, 0, 7, 0, 1, False, False, True, True))
print(Path('Misty Cave', 187, 182, 0, 7, 72, 1, True, True, True, False))
print(Path('World Map (Mist)', 13, 12, 0, 7, 1, 1, False, False, True, True))
print(Path('Misty Mountains 1', 50, 49, 0, 8, 34, 1, False, False, True, False))
print(Path('Misty Mountains 2', 31, 30, 0, 8, 33, 1, False, False, True, False))
print(Note('Misty Mountains Save Point'))
print(Path('Misty Mountains 2', 21, 20, 0, 8, 33, 0, False, True, True, False))
print(Path('Misty Mountains 3', 45, 42, 0, 8, 33, 1, True, True, True, False))

#-------------------------------------------------------------------------------
# Toroia and Eblan
#-------------------------------------------------------------------------------

print(Path('World Map (Toroia)', 46, 44, 0, 10, 5, 1, False, True, True, True))
print(Path('Toroian Castle', 106, 86, 0, 0, 0, 8, True, True, True, False))
print(Path('World Map (Toroia)', 39, 37, 1, 10, 5, 1, False, False, True, True))
print(Note('Black Chocobo to Eblan'))
print(Path('World Map (Eblan)', 31, 30, 0, 8, 5, 1, False, False, True, True))
print(Path('Castle Eblan', 84, 60, 1, 8, 93, 1, False, True, True, False))
print(Path('Cave Eblana B2F', 79, 66, 2, 0, 0, 5, True, True, True, False))
print(Path('Pass to Bab-il', 32, 31, 0, 8, 43, 1, False, False, True, False))
print(Path('Pass to Bab-il 2', 34, 33, 0, 8, 29, 1, False, False, True, False))
print(Path('Pass to Bab-il', 65, 64, 0, 8, 43, 1, False, False, True, False))

pass_to_babil_2_choices = [
    Option('Pass to Bab-il 2 Inward Direct', [
        Path('Pass to Bab-il 2', 31, 30, 0, 8, 29, 1, False, False, True, False),
        Noop(1),
    ]),
    Option('Pass to Bab-il 2 Inward Save Room Steps', [
        Path('Pass to Bab-il 2', 5, 4, 0, 8, 29, 1, False, False, True, False),
        Path('Pass to Bab-il 2 Save Room', 1, 0, 0, 0, 0, 1, True, False, True, False),
        Path('Pass to Bab-il 2', 32, 31, 0, 8, 29, 1, False, False, True, False),
    ]),
]

print(Choice(pass_to_babil_2_choices))

#-------------------------------------------------------------------------------
# Tower of Bab-il
#-------------------------------------------------------------------------------

print(Path('Tower of Bab-il 1F', 46, 44, 0, 8, 37, 1, False, False, True, False))
print(Path('Tower of Bab-il 2F', 60, 59, 0, 8, 38, 1, False, False, True, False))
print(Path('Tower of Bab-il 3F', 87, 86, 0, 8, 39, 1, False, False, True, False))
print(Path('Tower of Bab-il 4F', 61, 60, 0, 8, 40, 1, False, False, True, False))
print(Path('Tower of Bab-il 5F', 24, 23, 0, 8, 41, 1, False, False, True, False))
print(Note('Battle: Magus Sisters'))
print(Path('Tower of Bab-il 5F', 2, 1, 0, 8, 41, 0, False, True, True, False))
print(Path('Tower of Bab-il 6F', 13, 12, 0, 0, 0, 1, False, False, True, False))
print(Path('Tower of Bab-il 7F', 12, 11, 0, 0, 0, 1, False, False, True, False))
print(Path('Tower of Bab-il 6F', 19, 17, 0, 0, 0, 1, True, True, True, False))
print(Path('Tower of Bab-il 5F', 27, 25, 0, 8, 41, 0, False, False, True, False))
print(Path('Tower of Bab-il 4F', 62, 61, 0, 8, 40, 1, False, False, True, False))
print(Path('Tower of Bab-il 3F', 88, 87, 0, 8, 39, 1, False, False, True, False))
print(Path('Tower of Bab-il 2F', 61, 60, 0, 8, 38, 1, False, False, True, False))
print(Path('Tower of Bab-il 1F', 42, 41, 0, 8, 37, 1, False, False, True, False))
print(Path('Tower of Bab-il 1F Room', 9, 8, 0, 7, 60, 1, False, False, True, False))

#-------------------------------------------------------------------------------
# Underground
#-------------------------------------------------------------------------------

print(Path('Underworld Map (Castle of Dwarves)', 127, 123, 0, 8, 7, 1, False, True, True, True))
print(Path('Castle of Dwarves', 336, 223, 29, 0, 0, 17, True, True, True, False))
print(Path('Feymarch B1F', 37, 35, 0, 9, 67, 1, False, True, True, False))
print(Path('Feymarch B2F', 45, 44, 0, 9, 68, 1, False, False, True, False))
print(Path('Feymarch B3F', 49, 48, 0, 9, 69, 1, False, False, True, False))
print(Path('Feymarch Town', 2, 2, 0, 0, 0, 2, True, True, True, False))
print(Path('Feymarch B3F', 21, 19, 0, 9, 69, 1, False, True, True, False))

# TODO: Change the software to allow finding two fights serially. This is a
#       workaround that is probably suboptimal in some cases.
print(Search('Grind Fight 1 Search', [342], [
    Path('Feymarch B3F', 9, 9, 0, 9, 69, 0, False, True, True, False),
]))

print(Search('Grind Fight 2 Search', [341], [
    Path('Feymarch B3F', 12, 9, 0, 9, 69, 0, False, True, True, False),
]))

print(Path('Feymarch Basement', 7, 6, 0, 0, 0, 1, True, False, True, False))
print(Note('Battle: Ciriatto'))
print(Path('Underworld Map (Feymarch)', 1, 1, 0, 8, 8, 1, False, False, True, True))
print(Path('Bahamut\'s Lagoon B1F', 19, 18, 0, 8, 62, 1, False, False, True, False))
print(Path('Bahamut\'s Lagoon B2F', 18, 17, 0, 8, 63, 1, False, False, True, False))
print(Path('Bahamut\'s Lagoon B1F', 16, 15, 0, 8, 62, 1, False, False, True, False))
print(Path('Bahamut\'s Lagoon B2F', 37, 36, 0, 8, 63, 1, False, False, True, False))
print(Path('Bahamut\'s Lagoon B3F', 50, 45, 0, 8, 62, 1, False, True, True, False))
print(Path('Ice Mines B1F', 39, 38, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B2F', 55, 54, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B3F', 10, 9, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B2F', 35, 33, 0, 4, 64, 1, True, False, True, False))
print(Note('Cast Warp'))
print(Note('Battle: Alichino'))
print(Path('Underworld Map (Sealed Cave)', 1, 1, 0, 8, 8, 1, False, False, True, True))
print(Path('Castle of Dwarves', 52, 29, 0, 0, 0, 6, True, True, True, False))

#-------------------------------------------------------------------------------
# Tower of Bab-il
#-------------------------------------------------------------------------------

print(Path('Tower of Bab-il 1F', 20, 18, 0, 7, 59, 1, False, True, True, False))
print(Path('Tower of Bab-il 2F', 45, 44, 0, 7, 59, 1, False, False, True, False))
print(Path('Tower of Bab-il 3F', 51, 50, 0, 7, 59, 1, False, True, True, False))
print(Path('Tower of Bab-il 4F', 63, 62, 0, 7, 60, 1, False, False, True, False))
print(Path('Tower of Bab-il 5F', 58, 57, 0, 7, 60, 1, False, False, True, False))
print(Path('Tower of Bab-il 6F', 13, 12, 0, 7, 60, 1, False, False, True, False))
print(Path('Tower of Bab-il 7F', 44, 43, 0, 7, 61, 1, True, False, True, False))
print(Path('Tower of Bab-il 8F', 72, 71, 0, 8, 59, 1, False, False, True, False))
print(Path('Tower of Bab-il 7F', 25, 24, 0, 8, 60, 1, False, False, True, False))
print(Path('Tower of Bab-il 6F', 51, 50, 0, 8, 61, 1, False, False, True, False))
print(Path('Tower of Bab-il B1F', 82, 81, 0, 8, 52, 1, False, False, True, False))
print(Path('Tower of Bab-il B2F', 75, 74, 0, 8, 53, 1, False, False, True, False))
print(Path('Tower of Bab-il B3F', 14, 13, 0, 8, 54, 1, False, False, True, False))
print(Path('Tower of Bab-il B4F', 68, 67, 0, 8, 55, 1, False, False, True, False))
print(Path('Tower of Bab-il B3F', 43, 42, 0, 8, 54, 1, False, False, True, False))
print(Path('Tower of Bab-il B4F', 4, 3, 0, 8, 55, 1, False, False, True, False))
print(Path('Tower of Bab-il B5F', 33, 32, 0, 8, 56, 1, False, False, True, False))
print(Note('Land Airship South of Mysidia'))

#-------------------------------------------------------------------------------
# Ice Mines Revisited
#-------------------------------------------------------------------------------

print(Path('Ice Mines B1F', 39, 38, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B2F', 55, 54, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B3F', 10, 9, 0, 4, 64, 1, False, False, True, False))
print(Path('Ice Mines B2F', 35, 33, 0, 4, 64, 1, True, False, True, False))
print(Note('Cast Warp'))
print(Path('Underworld Map (Sealed Cave)', 1, 1, 0, 8, 8, 1, False, False, True, True))
print(Note('Fly to Mysidia'))
print(Path('World Map (Mysidia)', 5, 5, 0, 8, 4, 1, False, False, True, True))
print(Note('Fly to Lunar Path'))
print(Path('Lunar World Map', 6, 5, 0, 8, 9, 0, False, False, True, True))
print(Path('Lunar Path', 59, 58, 0, 8, 90, 1, False, False, True, False))
print(Path('Lunar World Map', 36, 35, 0, 8, 9, 1, False, False, True, True))
print(Path('Lunar Path 2', 32, 31, 0, 8, 91, 1, False, False, True, False))
print(Path('Lunar World Map', 18, 17, 0, 8, 9, 1, False, False, True, True))

old = """

#-------------------------------------------------------------------------------
# Final Dungeon
#-------------------------------------------------------------------------------

print(Path('Lunar World Map', 6, 5, 0, 8, 9, 0, False, False, True, True))
print(Path('Lunar Path', 39, 38, 0, 8, 90, 1, False, False, True, False))
print(Path('Lunar World Map', 36, 35, 0, 8, 9, 1, False, False, True, True))
print(Path('Lunar Path 2', 32, 31, 0, 8, 91, 1, False, False, True, False))
print(Path('Lunar World Map', 18, 17, 0, 8, 9, 1, False, False, True, True))
print(Path('Lunar Subterrane B1', 34, 33, 0, 7, 80, 1, False, False, True, False))
print(Path('Lunar Subterrane B2', 61, 29, 0, 7, 81, 1, True, True, True, False))
print(Path('Lunar Subterrane B3', 15, 14, 0, 7, 82, 1, False, False, True, False))
print(Path('Lunar Subterrane B4', 57, 56, 0, 8, 83, 1, True, False, True, False))
print(Path('Lunar Subterrane B4 Room', 30, 29, 0, 10, 86, 1, False, False, True, False))
print(Path('Lunar Subterrane B4', 16, 15, 0, 8, 83, 1, False, False, True, False))
print(Path('Lunar Subterrane B5', 18, 17, 0, 8, 84, 1, True, False, True, False))
print(Path('Lunar Subterrane B5 Room', 47, 33, 0, 10, 86, 1, False, True, True, False))
print(Path('Lunar Subterrane B5', 10, 9, 0, 8, 84, 1, True, False, True, False))
print(Path('Lunar Subterrane B5 Room', 15, 14, 0, 10, 87, 1, False, False, True, False))
print(Choice([
    Option('Lunar Subterrane B5 Inward Direct', [
        Path('Lunar Subterrane B5', 13, 12, 0, 8, 84, 1, False, False, True, False),
        Noop(1),
    ]),
    Option('Lunar Subterrane B5 Inward Pink Puff Room Steps', [
        Path('Lunar Subterrane B5', 14, 13, 0, 8, 84, 1, False, False, True, False),
        Path('Lunar Subterrane B5 Pink Puff Room', 1, 0, 0, 5, 92, 1, True, False, True, False),
        Path('Lunar Subterrane B5', 7, 6, 0, 8, 84, 1, False, False, True, False),
    ]),
]))
print(Path('Lunar Subterrane B6', 38, 37, 0, 8, 85, 1, True, False, True, False))
print(Path('Lunar Subterrane B6 Room', 14, 13, 0, 10, 87, 1, False, False, True, False))

lunar_subterrane_b7_choices = [
    Option('Lunar Subterrane B7 Inward Direct', [
        Noop(1 if not route.tas else 2),
        Path('Lunar Subterrane B7', 81, 80, 0, 8, 86, 1, True, False, True, False),
    ]),
    Option('Lunar Subterrane B7 Inward Save Room Steps', [
        Path('Lunar Subterrane B7', 24, 23, 0, 8, 86, 1, False, False, True, False),
        Path('Lunar Subterrane B7 Save Room', 1, 0, 0, 0, 0, 1, True, False, True, False),
        Noop(0 if not route.tas else 1),
        Path('Lunar Subterrane B7', 59, 58, 0, 8, 86, 1, True, False, True, False),
    ]),
]

if route.tas:
    lunar_subterrane_b7_choices.append(Option('Lunar Subterrane B7 Inward Save Room Save', [
        Path('Lunar Subterrane B7', 24, 23, 0, 8, 86, 1, False, False, True, False),
        Path('Lunar Subterrane B7 Save Room', 5, 3, 0, 0, 0, 1, False, False, True, False),
        Save('Lunar Subterrane B7 Save Room', 0),
        Path('Lunar Subterrane B7 Save Room', 6, 4, 0, 0, 0, 0, True, True, True, False),
        Path('Lunar Subterrane B7', 59, 58, 0, 8, 86, 1, True, False, True, False),
    ]))

if route.marathon:
    print(Path('Lunar Subterrane B7', 24, 23, 0, 8, 86, 1, False, False, True, False))
    print(Path('Lunar Subterrane B7 Save Room', 11, 7, 0, 0, 0, 1, True, False, True, False))
    print(Path('Lunar Subterrane B7', 59, 58, 0, 8, 86, 1, True, False, True, False))
else:
    print(Choice(lunar_subterrane_b7_choices))

print(Path('Lunar Core B1', 69, 68, 0, 8, 88, 1, False, False, True, False))
print(Path('Lunar Core B2', 56, 55, 0, 8, 88, 1, False, False, True, False))
print(Path('Lunar Core B3', 53, 52, 0, 8, 89, 1, False, False, True, False))
print(Path('Lunar Core B4', 71, 70, 0, 8, 79, 1, False, False, True, False))
"""
